#
# Copyright (c) 2013-2016, The SeedStack authors <http://seedstack.org>
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

AMBIGUOUS_CONSTRUCTOR_FOUND=Ambiguous constructor found for: ${constructor1}, ${constructor2} of object: ${object}.
AMBIGUOUS_CONSTRUCTOR_FOUND.fix=Please check for null parameters or ambiguous constructor with matching primitives and types for parameters: ${parameters}.
AMBIGUOUS_METHOD_FOUND=Ambiguous method found for: ${method1}, ${method2} of object: ${object}.
AMBIGUOUS_METHOD_FOUND.fix=Please check for null parameters or ambiguous method with matching primitives and types for parameters: ${parameters}.
CLASS_IS_NOT_AN_ANNOTATION=Specified qualifier for aggregate class ${aggregateClass} is not an annotation class: ${qualifierClass}.
CLASS_IS_NOT_AN_ANNOTATION.fix=You can either specify an annotation fully qualified name or an arbitrary string as qualifier.
DOMAIN_OBJECT_CONSTRUCTOR_NOT_FOUND=Constructor not found for: ${domainObject}, with parameters: ${parameters}.
DOMAIN_OBJECT_CONSTRUCTOR_NOT_FOUND.fix=Please check ${domainObject} for existing constructor using parameters ${parameters}.
ENTITY_ALREADY_HAS_AN_IDENTITY=Attempt to generate an identity for entity ${entityClass} which already has one.
ENTITY_ALREADY_HAS_AN_IDENTITY.fix=You must choose between using the identity generation mechanism or defining the identity manually.
EVENT_CYCLE_DETECTED=Illegal cycle detected when publishing event ${event}.
EVENT_CYCLE_DETECTED.fix=Break any cycle that can occur when an event of class ${event} is published.
EXCEPTION_OCCURRED_DURING_EVENT_HANDLER_INVOCATION=Event handler invocation failed when publishing event of class ${event}.
IDENTITY_TYPE_CANNOT_BE_GENERATED_BY_HANDLER=The identity handler ${handlerClass} cannot generate an identity of type ${entityIdClass} required for entity class ${entityClass}. It only can generate identities of type ${handlerIdClass}.
IDENTITY_TYPE_CANNOT_BE_GENERATED_BY_HANDLER.fix=Make sure to use an identity handler that can generate identities of type ${entityIdClass}.
ILLEGAL_FACTORY=Illegal factory class ${class}.
ILLEGAL_FACTORY.fix=Check that ${class} is annotated with @DomainFactory and implements Factory.
ILLEGAL_IDENTITY_HANDLER=Illegal identity handler class ${class}.
ILLEGAL_IDENTITY_HANDLER.fix=Check that ${class} implements IdentityHandler.
ILLEGAL_POLICY=Illegal policy class ${class}.
ILLEGAL_POLICY.fix=Check that ${class} is annotated with @DomainPolicy.
ILLEGAL_REPOSITORY=Illegal repository class ${class}.
ILLEGAL_REPOSITORY.fix=Check that ${class} is annotated with @DomainRepository.
ILLEGAL_SERVICE=Illegal service class ${class}.
ILLEGAL_SERVICE.fix=Check that ${class} is annotated with @Service.
NO_IDENTITY_FIELD_DECLARED_FOR_ENTITY=No identity field was found for entity class ${entityClass}.
NO_IDENTITY_FIELD_DECLARED_FOR_ENTITY.fix=Annotate the field containing the identity of the entity with @Identity.
NO_IDENTITY_HANDLER_QUALIFIER_FOUND_ON_ENTITY=Qualifier not specified for identity handler ${handlerClass}.
NO_IDENTITY_HANDLER_QUALIFIER_FOUND_ON_ENTITY.fix=Specify a qualifier (arbitrary name or qualifier class name) for entity ${entityClass} with the handlerQualifier class configuration attribute.
UNABLE_TO_FIND_ASSEMBLER=No assembler found to assemble ${aggregateRoot} to ${dto}.
UNABLE_TO_FIND_ASSEMBLER.fix=Make sure that you either have created an explicit assembler or specified the qualifier of the assembler to user in the fluent assembler DSL.
UNABLE_TO_FIND_ASSEMBLER_WITH_QUALIFIER=No assembler qualified with ${qualifier} found to assemble ${aggregateRoot} to ${dto}.
UNABLE_TO_FIND_ASSEMBLER_WITH_QUALIFIER.fix=Make sure that you either have created an assembler qualified with ${qualifier} or that you use a default assembler with the @DtoOf annotation on your the DTO class ${dto}.
UNABLE_TO_FIND_FACTORY_METHOD=Unable to find a suitable factory method for aggregate class '${aggregateClass}' with parameters: ${parameters}.
UNABLE_TO_FIND_FACTORY_METHOD.fix=Make sure a factory exists for aggregate class '${aggregateClass}' and has a method accepting the following parameters: ${parameters}.
UNABLE_TO_INJECT_ENTITY_IDENTITY=Cannot inject identity in entity of class ${entityClass}.
UNABLE_TO_INVOKE_CONSTRUCTOR=Unable to invoke constructor ${constructor} of domain object ${domainObject} (parameters: ${parameters}).
UNABLE_TO_INVOKE_CONSTRUCTOR.fix=Make sure that a suitable constructor is available on domain object ${domainObject}.
UNABLE_TO_INVOKE_FACTORY_METHOD=Unable to invoke factory method '${factoryClass}#${factoryMethod}' for aggregate class '${aggregateClass}' with the following parameters: ${parameters}.
UNABLE_TO_INVOKE_FACTORY_METHOD.fix=Make sure that the factory method '${factoryClass}#${factoryMethod}' is public and accepts the following parameters: ${parameters}.
